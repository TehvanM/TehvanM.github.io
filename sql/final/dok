-- ülesanne 12
CREATE TABLE kasutajad(
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	first_name TEXT NOT NULL,
	last_name TEXT NOT NULL,
	email TEXT NOT NULL,
	telefon TEXT NOT NULL
);

ALTER TABLE kasutajad RENAME TO users;
ALTER TABLE users RENAME COLUMN telefon TO phone;

ALTER TABLE users ADD COLUMN image TEXT;

.schema users
-- ülesanne 13

INSERT INTO users (first_name, last_name, email, phone, image)
VALUES ('Tehvan', 'Marjapuu', 'Tehvan.marjapuu@gmail.com', '555444666', 'tehvan.jpg'),
('Mario', 'Methhein', 'Mario.methhein@hotmail.ee', '3728969425', 'mario.jpg');

.read users.sql

SELECT * FROM users LIMIT 10;

-- ülesanne 14

SELECT * FROM users ORDER BY last_name LIMIT 3;

SELECT * FROM users
WHERE first_name LIKE 'G%' AND email LIKE '%.com'
ORDER BY email DESC;


SELECT id, first_name, last_name, phone,
	CASE
	WHEN phone LIKE '372%' THEN 'EESTI'
	ELSE 'VÄLISMAA'
	END AS telefonitüüp
FROM users;


SELECT first_name, last_name, email, phone,
	CASE
	WHEN email LIKE '%.edu' OR email LIKE '%.gov' THEN 'HARIDUSASUTUS'
	ELSE 'ERAFIRMA'
	END AS email_kuuluvus
FROM users
WHERE phone LIKE '372%'
ORDER BY last_name
LIMIT 1;

-- ülesanne 15

UPDATE users
SET email = 'TehvanON.äge@muidugion.com', phone = '123456'
WHERE first_name = 'Tehvan';

DELETE FROM users WHERE id BETWEEN 5 AND 10;


SELECT * FROM users LIMIT 10;

-- ülesanne 16


CREATE TABLE users(
id INTEGER PRIMARY KEY AUTOINCREMENT,
eesnimi TEXT NOT NULL,
perenimi TEXT NOT NULL,
email TEXT NOT NULL,
tel TEXT NOT NULL,
profiilipilt TEXT NOT NULL
);



CREATE TABLE bookings(
id INTEGER PRIMARY KEY AUTOINCREMENT,
users_id INTEGER,
rooms_id INTEGER,
saabumine TEXT NOT NULL,
lahkumine TEXT NOT NULL,
FOREIGN KEY (users_id) REFERENCES users(id),
FOREIGN KEY (rooms_id) REFERENCES rooms(id)
);



CREATE TABLE rooms(
id INTEGER PRIMARY KEY AUTOINCREMENT,
toa_number TEXT NOT NULL,
toa_tyyp TEXT NOT NULL,
toa_hind INTEGER NOT NULL,
toa_saadavus TEXT NOT NULL
);



CREATE TABLE payments(
id INTEGER PRIMARY KEY AUTOINCREMENT,
bookings_id INTEGER,
arve_summa TEXT NOT NULL,
tasumis_paev TEXT NOT NULL,
makseviis TEXT NOT NULL,
FOREIGN KEY (bookings_id) REFERENCES bookings(id)
);



.read users2.sql
.read bookings.sql
.read payments.sql
.read rooms.sql



select users.eesnimi, users.perenimi, rooms.toa_number, rooms.toa_tyyp
FROM bookings
INNER JOIN users ON bookings.users_id = users.id
INNER JOIN rooms ON bookings.rooms_id= rooms.id;



select payments.tasumis_paev, payments.arve_summa
FROM bookings
INNER JOIN payments ON bookings.id = payments.id;



select users.eesnimi, users.perenimi, rooms.toa_tyyp, rooms.toa_hind, bookings.saabumine, bookings.lahkumine, payments.arve_summa, payments.tasumis_paev, payments.makseviis
FROM bookings
INNER JOIN users ON bookings.users_id = users.id
INNER JOIN rooms ON bookings.rooms_id = rooms.id
INNER JOIN payments ON bookings.users_id = payments.id; 


-- ülesanne 17


SELECT count(users_id), users.eesnimi, users.perenimi
FROM bookings
INNER JOIN users ON bookings.users_id = users.id
GROUP BY users_id
HAVING count(users_id) > 2
;


SELECT COUNT(rooms_id) AS Kordus, SUM(payments.arve_summa) AS Summa, users.eesnimi, users.perenimi
FROM bookings
INNER JOIN users ON users.id = bookings.users_id
INNER JOIN payments on payments.id = bookings.id
GROUP BY users_id
;


SELECT COUNT(rooms_id) AS kordus, users.eesnimi, users.perenimi
FROM bookings
INNER JOIN users ON users.id = bookings.users_id
GROUP BY users_id
;


SELECT count(users_id)
FROM bookings
WHERE users_id IN (
	SELECT users_id
	FROM bookings
	GROUP BY users_id
	HAVING count(users_id) > 2
)
GROUP BY users_id;





